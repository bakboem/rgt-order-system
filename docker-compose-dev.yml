services:
  ### PostgreSQL ###
  postgresql:
    build: ./backend/db
    container_name: postgresql
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    env_file:
      - ./backend/db/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rgt-user -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  ### RabbitMQ ###
  rabbitmq:
    build: ./backend/queue
    container_name: rabbitmq
    env_file:
      - ./backend/queue/.env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./backend/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 120s

  # ## Backend (FastAPI) ###
  # appserver:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: appserver
  #   depends_on:
  #     postgresql:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./backend/app:/app
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   restart: always

  # ### Frontend (React with TypeScript) ###
  # frontend:
  #   build:
  #     context: ./frontend/react-app
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend/react-app:/usr/src/app
  #     - /usr/src/app/node_modules
  #   stdin_open: true
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   restart: always

volumes:
  postgresql-data:
  rabbitmq-data:
